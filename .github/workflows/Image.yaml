name: Build and Push Image to ECR
on:
  # push
  workflow_dispatch:
        
env:
  IMAGE_TAG: latest
  PROJECT_NAME: flask-lambda-app                # Same as environment variable in Terraform
  ECR_REPOSITORY: flask-lambda-app         # Amazon ECR repository name
  ECS_SERVICE: ecs-service                # Amazon ECS service name
  ECS_CLUSTER: ecs-cluster                # Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition    # Name of the ECS task definition
  CONTAINER_NAME: flask-lambda-app              # Name of the container in containerDefinitions section

# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  build-and-push-image:
    name: Build and Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
